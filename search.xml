<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JWT介绍</title>
    <url>/hexo_blog/2024/09/23/JWT/</url>
    <content><![CDATA[<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h2><p>​	JWT(JSON WEB TOKEN)是一种开放标准（RFC 7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以 JSON 对象安全地传输信息。JWT 可以对声明进行签名，从而确保数据的真实性和完整性，并且可以加密以保护数据的机密性。JWT 通常用于身份验证和授权场景。</p>
<h2 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h2><ul>
<li><p><strong>Header（头部）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,<span class="comment">//加密算法</span></span><br><span class="line">  <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span><span class="comment">//令牌类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Payload（载荷）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Signature（签名）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> + base64UrlEncode(payload), secret);</span><br></pre></td></tr></table></figure>

<p>​	将header和payload加密后用 “.”连接就是Signature(签名)</p>
</li>
</ul>
<h2 id="生成JWT"><a href="#生成JWT" class="headerlink" title="生成JWT"></a>生成JWT</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signature_key</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;<span class="comment">//为安全考虑 通常不是这么写的</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">jwtBuilder</span> <span class="operator">=</span> Jwts.builder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">JWTToken</span> <span class="operator">=</span> jwtBuilder</span><br><span class="line">                <span class="comment">//header</span></span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                <span class="comment">//payload</span></span><br><span class="line">                .claim(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .claim(<span class="string">&quot;roles&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date(System.currentTimeMillis() +<span class="number">3000</span> ))</span><br><span class="line">                <span class="comment">//signature</span></span><br><span class="line">                .signWith(io.jsonwebtoken.SignatureAlgorithm.HS256, signature_key)</span><br><span class="line">                .compact();<span class="comment">//将整个 JWT 令牌序列化为字符串</span></span><br><span class="line">        <span class="keyword">return</span> JWTToken;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="校验JWT"><a href="#校验JWT" class="headerlink" title="校验JWT"></a>校验JWT</h2><p>​	如果token有错误或者过期了就会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signature_key</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;<span class="comment">//为安全考虑 通常不是这么写的</span></span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser().setSigningKey(signature_key).parseClaimsJws(token).getBody();</span><br><span class="line">           <span class="type">Date</span> <span class="variable">expiration</span> <span class="operator">=</span> claims.getExpiration();</span><br><span class="line">           <span class="keyword">if</span> (expiration.before(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">               <span class="comment">// JWT过期，需要重置token</span></span><br><span class="line">               <span class="comment">// <span class="doctag">TODO:</span> 重置token的逻辑</span></span><br><span class="line">               System.out.println(<span class="string">&quot;token expired&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Token is expired&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Unsupported JWT token&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Malformed JWT token&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Invalid JWT signature&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Illegal argument token&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.util;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jwt</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signature_key</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;<span class="comment">//为安全考虑 通常不是这么写的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">jwtBuilder</span> <span class="operator">=</span> Jwts.builder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">JWTToken</span> <span class="operator">=</span> jwtBuilder</span><br><span class="line">                <span class="comment">//header</span></span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                <span class="comment">//payload</span></span><br><span class="line">                .claim(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .claim(<span class="string">&quot;roles&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date(System.currentTimeMillis() +<span class="number">3000</span> ))</span><br><span class="line">                <span class="comment">//signature</span></span><br><span class="line">                .signWith(io.jsonwebtoken.SignatureAlgorithm.HS256, signature_key)</span><br><span class="line">                .compact();<span class="comment">//将整个 JWT 令牌序列化为字符串</span></span><br><span class="line">        <span class="keyword">return</span> JWTToken;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser().setSigningKey(signature_key).parseClaimsJws(token).getBody();</span><br><span class="line">            <span class="type">Date</span> <span class="variable">expiration</span> <span class="operator">=</span> claims.getExpiration();</span><br><span class="line">            <span class="keyword">if</span> (expiration.before(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">                <span class="comment">// JWT过期，需要重置token</span></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 重置token的逻辑</span></span><br><span class="line">                System.out.println(<span class="string">&quot;token expired&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Token is expired&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Unsupported JWT token&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Malformed JWT token&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invalid JWT signature&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Illegal argument token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> createToken();</span><br><span class="line">        System.out.println(token);</span><br><span class="line">        System.out.println(checkToken(token));</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(checkToken(token));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个程序的输出的结果为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4iLCJyb2xlcyI6ImFkbWluIiwic3ViIjoiYWRtaW4iLCJleHAiOjE3MjA2OTA4MDl9.S7gZajm8EtGZYc_BYKVOFIbktkalg_KnFQHbbAvW9TY<span class="comment">//生成的token</span></span><br><span class="line"><span class="literal">true</span><span class="comment">//校验结果</span></span><br><span class="line">Token is expired<span class="comment">//token过期了</span></span><br><span class="line"><span class="literal">false</span><span class="comment">//校验结果</span></span><br></pre></td></tr></table></figure>

<p>讲上方生成的token复制到<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a>可以查看解密后的token</p>
<h2 id="登录业务"><a href="#登录业务" class="headerlink" title="登录业务"></a>登录业务</h2><ol>
<li>用户在客户端输入账号密码登录</li>
<li>服务端校验密码</li>
<li>密码正确，服务端生成一个token返回给客户端，客户端会将token存储下来（LocalStorage或者Session）</li>
<li>客户端在后面的请求中都会携带token,服务器每次处理请求都会先校验一次token再返回客户端的请求</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>微信小程序中文md5</title>
    <url>/hexo_blog/2024/09/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%96%87md5/</url>
    <content><![CDATA[<p>最近在写一个微信小程序用到了md5，网上找了很多md5中文都有bug。</p>
<p> 下面是一个中文无bug的md5</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span></span><br><span class="line"><span class="comment"> * Digest Algorithm, as defined in RFC 1321.</span></span><br><span class="line"><span class="comment"> * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009</span></span><br><span class="line"><span class="comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment"> * Distributed under the BSD License</span></span><br><span class="line"><span class="comment"> * See http://pajhome.org.uk/crypt/md5 for more info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Configurable variables. You may need to tweak these to be compatible with</span></span><br><span class="line"><span class="comment"> * the server-side, but the defaults work in most cases.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hexcase = <span class="number">0</span>;   <span class="comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span></span><br><span class="line"><span class="keyword">var</span> b64pad = <span class="string">&quot;&quot;</span>;  <span class="comment">/* base-64 pad character. &quot;=&quot; for strict RFC compliance   */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These are the functions you&#x27;ll usually want to call</span></span><br><span class="line"><span class="comment"> * They take string arguments and return either hex or base-64 encoded strings</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex_md5</span>(<span class="params">s</span>) &#123; <span class="keyword">return</span> <span class="title function_">rstr2hex</span>(<span class="title function_">rstr_md5</span>(<span class="title function_">str2rstr_utf8</span>(s))); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b64_md5</span>(<span class="params">s</span>) &#123; <span class="keyword">return</span> <span class="title function_">rstr2b64</span>(<span class="title function_">rstr_md5</span>(<span class="title function_">str2rstr_utf8</span>(s))); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">any_md5</span>(<span class="params">s, e</span>) &#123; <span class="keyword">return</span> <span class="title function_">rstr2any</span>(<span class="title function_">rstr_md5</span>(<span class="title function_">str2rstr_utf8</span>(s)), e); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex_hmac_md5</span>(<span class="params">k, d</span>)</span><br><span class="line">&#123; <span class="keyword">return</span> <span class="title function_">rstr2hex</span>(<span class="title function_">rstr_hmac_md5</span>(<span class="title function_">str2rstr_utf8</span>(k), <span class="title function_">str2rstr_utf8</span>(d))); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b64_hmac_md5</span>(<span class="params">k, d</span>)</span><br><span class="line">&#123; <span class="keyword">return</span> <span class="title function_">rstr2b64</span>(<span class="title function_">rstr_hmac_md5</span>(<span class="title function_">str2rstr_utf8</span>(k), <span class="title function_">str2rstr_utf8</span>(d))); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">any_hmac_md5</span>(<span class="params">k, d, e</span>)</span><br><span class="line">&#123; <span class="keyword">return</span> <span class="title function_">rstr2any</span>(<span class="title function_">rstr_hmac_md5</span>(<span class="title function_">str2rstr_utf8</span>(k), <span class="title function_">str2rstr_utf8</span>(d)), e); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Perform a simple self-test to see if the VM is working</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5_vm_test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">hex_md5</span>(<span class="string">&quot;abc&quot;</span>).<span class="title function_">toLowerCase</span>() == <span class="string">&quot;900150983cd24fb0d6963f7d28e17f72&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the MD5 of a raw string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rstr_md5</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">binl2rstr</span>(<span class="title function_">binl_md5</span>(<span class="title function_">rstr2binl</span>(s), s.<span class="property">length</span> * <span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the HMAC-MD5, of a key and some data (raw strings)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rstr_hmac_md5</span>(<span class="params">key, data</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> bkey = <span class="title function_">rstr2binl</span>(key);</span><br><span class="line">  <span class="keyword">if</span> (bkey.<span class="property">length</span> &gt; <span class="number">16</span>) bkey = <span class="title function_">binl_md5</span>(bkey, key.<span class="property">length</span> * <span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> ipad = <span class="title class_">Array</span>(<span class="number">16</span>), opad = <span class="title class_">Array</span>(<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">    ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">    opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> hash = <span class="title function_">binl_md5</span>(ipad.<span class="title function_">concat</span>(<span class="title function_">rstr2binl</span>(data)), <span class="number">512</span> + data.<span class="property">length</span> * <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">binl2rstr</span>(<span class="title function_">binl_md5</span>(opad.<span class="title function_">concat</span>(hash), <span class="number">512</span> + <span class="number">128</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert a raw string to a hex string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rstr2hex</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123; hexcase &#125; <span class="keyword">catch</span> (e) &#123; hexcase = <span class="number">0</span>; &#125;</span><br><span class="line">  <span class="keyword">var</span> hex_tab = hexcase ? <span class="string">&quot;0123456789ABCDEF&quot;</span> : <span class="string">&quot;0123456789abcdef&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    x = input.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    output += hex_tab.<span class="title function_">charAt</span>((x &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>)</span><br><span class="line">      + hex_tab.<span class="title function_">charAt</span>(x &amp; <span class="number">0x0F</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert a raw string to a base-64 string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rstr2b64</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123; b64pad &#125; <span class="keyword">catch</span> (e) &#123; b64pad = <span class="string">&#x27;&#x27;</span>; &#125;</span><br><span class="line">  <span class="keyword">var</span> tab = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> len = input.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> triplet = (input.<span class="title function_">charCodeAt</span>(i) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">      | (i + <span class="number">1</span> &lt; len ? input.<span class="title function_">charCodeAt</span>(i + <span class="number">1</span>) &lt;&lt; <span class="number">8</span> : <span class="number">0</span>)</span><br><span class="line">      | (i + <span class="number">2</span> &lt; len ? input.<span class="title function_">charCodeAt</span>(i + <span class="number">2</span>) : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i * <span class="number">8</span> + j * <span class="number">6</span> &gt; input.<span class="property">length</span> * <span class="number">8</span>) output += b64pad;</span><br><span class="line">      <span class="keyword">else</span> output += tab.<span class="title function_">charAt</span>((triplet &gt;&gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - j)) &amp; <span class="number">0x3F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert a raw string to an arbitrary string encoding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rstr2any</span>(<span class="params">input, encoding</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> divisor = encoding.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">var</span> i, j, q, x, quotient;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Convert to an array of 16-bit big-endian values, forming the dividend */</span></span><br><span class="line">  <span class="keyword">var</span> dividend = <span class="title class_">Array</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(input.<span class="property">length</span> / <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dividend.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    dividend[i] = (input.<span class="title function_">charCodeAt</span>(i * <span class="number">2</span>) &lt;&lt; <span class="number">8</span>) | input.<span class="title function_">charCodeAt</span>(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Repeatedly perform a long division. The binary array forms the dividend,</span></span><br><span class="line"><span class="comment">   * the length of the encoding is the divisor. Once computed, the quotient</span></span><br><span class="line"><span class="comment">   * forms the dividend for the next step. All remainders are stored for later</span></span><br><span class="line"><span class="comment">   * use.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> full_length = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(input.<span class="property">length</span> * <span class="number">8</span> /</span><br><span class="line">    (<span class="title class_">Math</span>.<span class="title function_">log</span>(encoding.<span class="property">length</span>) / <span class="title class_">Math</span>.<span class="title function_">log</span>(<span class="number">2</span>)));</span><br><span class="line">  <span class="keyword">var</span> remainders = <span class="title class_">Array</span>(full_length);</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; full_length; j++) &#123;</span><br><span class="line">    quotient = <span class="title class_">Array</span>();</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dividend.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      x = (x &lt;&lt; <span class="number">16</span>) + dividend[i];</span><br><span class="line">      q = <span class="title class_">Math</span>.<span class="title function_">floor</span>(x / divisor);</span><br><span class="line">      x -= q * divisor;</span><br><span class="line">      <span class="keyword">if</span> (quotient.<span class="property">length</span> &gt; <span class="number">0</span> || q &gt; <span class="number">0</span>)</span><br><span class="line">        quotient[quotient.<span class="property">length</span>] = q;</span><br><span class="line">    &#125;</span><br><span class="line">    remainders[j] = x;</span><br><span class="line">    dividend = quotient;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Convert the remainders to the output string */</span></span><br><span class="line">  <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = remainders.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    output += encoding.<span class="title function_">charAt</span>(remainders[i]);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Encode a string as utf-8.</span></span><br><span class="line"><span class="comment"> * For efficiency, this assumes the input is valid utf-16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">str2rstr_utf8</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> i = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> x, y;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">while</span> (++i &lt; input.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">/* Decode utf-16 surrogate pairs */</span></span><br><span class="line">    x = input.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    y = i + <span class="number">1</span> &lt; input.<span class="property">length</span> ? input.<span class="title function_">charCodeAt</span>(i + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0xD800</span> &lt;= x &amp;&amp; x &lt;= <span class="number">0xDBFF</span> &amp;&amp; <span class="number">0xDC00</span> &lt;= y &amp;&amp; y &lt;= <span class="number">0xDFFF</span>) &#123;</span><br><span class="line">      x = <span class="number">0x10000</span> + ((x &amp; <span class="number">0x03FF</span>) &lt;&lt; <span class="number">10</span>) + (y &amp; <span class="number">0x03FF</span>);</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* Encode output as utf-8 */</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">0x7F</span>)</span><br><span class="line">      output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">0x7FF</span>)</span><br><span class="line">      output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">0xC0</span> | ((x &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x1F</span>),</span><br><span class="line">        <span class="number">0x80</span> | (x &amp; <span class="number">0x3F</span>));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">0xFFFF</span>)</span><br><span class="line">      output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">0xE0</span> | ((x &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>),</span><br><span class="line">        <span class="number">0x80</span> | ((x &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>),</span><br><span class="line">        <span class="number">0x80</span> | (x &amp; <span class="number">0x3F</span>));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">0x1FFFFF</span>)</span><br><span class="line">      output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">0xF0</span> | ((x &gt;&gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x07</span>),</span><br><span class="line">        <span class="number">0x80</span> | ((x &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>),</span><br><span class="line">        <span class="number">0x80</span> | ((x &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>),</span><br><span class="line">        <span class="number">0x80</span> | (x &amp; <span class="number">0x3F</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Encode a string as utf-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">str2rstr_utf16le</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.<span class="property">length</span>; i++)</span><br><span class="line">    output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(input.<span class="title function_">charCodeAt</span>(i) &amp; <span class="number">0xFF</span>,</span><br><span class="line">      (input.<span class="title function_">charCodeAt</span>(i) &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">str2rstr_utf16be</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.<span class="property">length</span>; i++)</span><br><span class="line">    output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((input.<span class="title function_">charCodeAt</span>(i) &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>,</span><br><span class="line">      input.<span class="title function_">charCodeAt</span>(i) &amp; <span class="number">0xFF</span>);</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert a raw string to an array of little-endian words</span></span><br><span class="line"><span class="comment"> * Characters &gt;255 have their high-byte silently ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rstr2binl</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="title class_">Array</span>(input.<span class="property">length</span> &gt;&gt; <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; output.<span class="property">length</span>; i++)</span><br><span class="line">    output[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.<span class="property">length</span> * <span class="number">8</span>; i += <span class="number">8</span>)</span><br><span class="line">    output[i &gt;&gt; <span class="number">5</span>] |= (input.<span class="title function_">charCodeAt</span>(i / <span class="number">8</span>) &amp; <span class="number">0xFF</span>) &lt;&lt; (i % <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binl2rstr</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.<span class="property">length</span> * <span class="number">32</span>; i += <span class="number">8</span>)</span><br><span class="line">    output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((input[i &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the MD5 of an array of little-endian words, and a bit length.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binl_md5</span>(<span class="params">x, len</span>) &#123;</span><br><span class="line">  <span class="comment">/* append padding */</span></span><br><span class="line">  x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; ((len) % <span class="number">32</span>);</span><br><span class="line">  x[(((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1732584193</span>;</span><br><span class="line">  <span class="keyword">var</span> b = -<span class="number">271733879</span>;</span><br><span class="line">  <span class="keyword">var</span> c = -<span class="number">1732584194</span>;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">271733878</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.<span class="property">length</span>; i += <span class="number">16</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> olda = a;</span><br><span class="line">    <span class="keyword">var</span> oldb = b;</span><br><span class="line">    <span class="keyword">var</span> oldc = c;</span><br><span class="line">    <span class="keyword">var</span> oldd = d;</span><br><span class="line"> </span><br><span class="line">    a = <span class="title function_">md5_ff</span>(a, b, c, d, x[i + <span class="number">0</span>], <span class="number">7</span>, -<span class="number">680876936</span>);</span><br><span class="line">    d = <span class="title function_">md5_ff</span>(d, a, b, c, x[i + <span class="number">1</span>], <span class="number">12</span>, -<span class="number">389564586</span>);</span><br><span class="line">    c = <span class="title function_">md5_ff</span>(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>);</span><br><span class="line">    b = <span class="title function_">md5_ff</span>(b, c, d, a, x[i + <span class="number">3</span>], <span class="number">22</span>, -<span class="number">1044525330</span>);</span><br><span class="line">    a = <span class="title function_">md5_ff</span>(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">7</span>, -<span class="number">176418897</span>);</span><br><span class="line">    d = <span class="title function_">md5_ff</span>(d, a, b, c, x[i + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>);</span><br><span class="line">    c = <span class="title function_">md5_ff</span>(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">17</span>, -<span class="number">1473231341</span>);</span><br><span class="line">    b = <span class="title function_">md5_ff</span>(b, c, d, a, x[i + <span class="number">7</span>], <span class="number">22</span>, -<span class="number">45705983</span>);</span><br><span class="line">    a = <span class="title function_">md5_ff</span>(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>);</span><br><span class="line">    d = <span class="title function_">md5_ff</span>(d, a, b, c, x[i + <span class="number">9</span>], <span class="number">12</span>, -<span class="number">1958414417</span>);</span><br><span class="line">    c = <span class="title function_">md5_ff</span>(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">17</span>, -<span class="number">42063</span>);</span><br><span class="line">    b = <span class="title function_">md5_ff</span>(b, c, d, a, x[i + <span class="number">11</span>], <span class="number">22</span>, -<span class="number">1990404162</span>);</span><br><span class="line">    a = <span class="title function_">md5_ff</span>(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>);</span><br><span class="line">    d = <span class="title function_">md5_ff</span>(d, a, b, c, x[i + <span class="number">13</span>], <span class="number">12</span>, -<span class="number">40341101</span>);</span><br><span class="line">    c = <span class="title function_">md5_ff</span>(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">17</span>, -<span class="number">1502002290</span>);</span><br><span class="line">    b = <span class="title function_">md5_ff</span>(b, c, d, a, x[i + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>);</span><br><span class="line"> </span><br><span class="line">    a = <span class="title function_">md5_gg</span>(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">5</span>, -<span class="number">165796510</span>);</span><br><span class="line">    d = <span class="title function_">md5_gg</span>(d, a, b, c, x[i + <span class="number">6</span>], <span class="number">9</span>, -<span class="number">1069501632</span>);</span><br><span class="line">    c = <span class="title function_">md5_gg</span>(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>);</span><br><span class="line">    b = <span class="title function_">md5_gg</span>(b, c, d, a, x[i + <span class="number">0</span>], <span class="number">20</span>, -<span class="number">373897302</span>);</span><br><span class="line">    a = <span class="title function_">md5_gg</span>(a, b, c, d, x[i + <span class="number">5</span>], <span class="number">5</span>, -<span class="number">701558691</span>);</span><br><span class="line">    d = <span class="title function_">md5_gg</span>(d, a, b, c, x[i + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>);</span><br><span class="line">    c = <span class="title function_">md5_gg</span>(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">14</span>, -<span class="number">660478335</span>);</span><br><span class="line">    b = <span class="title function_">md5_gg</span>(b, c, d, a, x[i + <span class="number">4</span>], <span class="number">20</span>, -<span class="number">405537848</span>);</span><br><span class="line">    a = <span class="title function_">md5_gg</span>(a, b, c, d, x[i + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>);</span><br><span class="line">    d = <span class="title function_">md5_gg</span>(d, a, b, c, x[i + <span class="number">14</span>], <span class="number">9</span>, -<span class="number">1019803690</span>);</span><br><span class="line">    c = <span class="title function_">md5_gg</span>(c, d, a, b, x[i + <span class="number">3</span>], <span class="number">14</span>, -<span class="number">187363961</span>);</span><br><span class="line">    b = <span class="title function_">md5_gg</span>(b, c, d, a, x[i + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>);</span><br><span class="line">    a = <span class="title function_">md5_gg</span>(a, b, c, d, x[i + <span class="number">13</span>], <span class="number">5</span>, -<span class="number">1444681467</span>);</span><br><span class="line">    d = <span class="title function_">md5_gg</span>(d, a, b, c, x[i + <span class="number">2</span>], <span class="number">9</span>, -<span class="number">51403784</span>);</span><br><span class="line">    c = <span class="title function_">md5_gg</span>(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>);</span><br><span class="line">    b = <span class="title function_">md5_gg</span>(b, c, d, a, x[i + <span class="number">12</span>], <span class="number">20</span>, -<span class="number">1926607734</span>);</span><br><span class="line"> </span><br><span class="line">    a = <span class="title function_">md5_hh</span>(a, b, c, d, x[i + <span class="number">5</span>], <span class="number">4</span>, -<span class="number">378558</span>);</span><br><span class="line">    d = <span class="title function_">md5_hh</span>(d, a, b, c, x[i + <span class="number">8</span>], <span class="number">11</span>, -<span class="number">2022574463</span>);</span><br><span class="line">    c = <span class="title function_">md5_hh</span>(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>);</span><br><span class="line">    b = <span class="title function_">md5_hh</span>(b, c, d, a, x[i + <span class="number">14</span>], <span class="number">23</span>, -<span class="number">35309556</span>);</span><br><span class="line">    a = <span class="title function_">md5_hh</span>(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">4</span>, -<span class="number">1530992060</span>);</span><br><span class="line">    d = <span class="title function_">md5_hh</span>(d, a, b, c, x[i + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>);</span><br><span class="line">    c = <span class="title function_">md5_hh</span>(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">16</span>, -<span class="number">155497632</span>);</span><br><span class="line">    b = <span class="title function_">md5_hh</span>(b, c, d, a, x[i + <span class="number">10</span>], <span class="number">23</span>, -<span class="number">1094730640</span>);</span><br><span class="line">    a = <span class="title function_">md5_hh</span>(a, b, c, d, x[i + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>);</span><br><span class="line">    d = <span class="title function_">md5_hh</span>(d, a, b, c, x[i + <span class="number">0</span>], <span class="number">11</span>, -<span class="number">358537222</span>);</span><br><span class="line">    c = <span class="title function_">md5_hh</span>(c, d, a, b, x[i + <span class="number">3</span>], <span class="number">16</span>, -<span class="number">722521979</span>);</span><br><span class="line">    b = <span class="title function_">md5_hh</span>(b, c, d, a, x[i + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>);</span><br><span class="line">    a = <span class="title function_">md5_hh</span>(a, b, c, d, x[i + <span class="number">9</span>], <span class="number">4</span>, -<span class="number">640364487</span>);</span><br><span class="line">    d = <span class="title function_">md5_hh</span>(d, a, b, c, x[i + <span class="number">12</span>], <span class="number">11</span>, -<span class="number">421815835</span>);</span><br><span class="line">    c = <span class="title function_">md5_hh</span>(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>);</span><br><span class="line">    b = <span class="title function_">md5_hh</span>(b, c, d, a, x[i + <span class="number">2</span>], <span class="number">23</span>, -<span class="number">995338651</span>);</span><br><span class="line"> </span><br><span class="line">    a = <span class="title function_">md5_ii</span>(a, b, c, d, x[i + <span class="number">0</span>], <span class="number">6</span>, -<span class="number">198630844</span>);</span><br><span class="line">    d = <span class="title function_">md5_ii</span>(d, a, b, c, x[i + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>);</span><br><span class="line">    c = <span class="title function_">md5_ii</span>(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">15</span>, -<span class="number">1416354905</span>);</span><br><span class="line">    b = <span class="title function_">md5_ii</span>(b, c, d, a, x[i + <span class="number">5</span>], <span class="number">21</span>, -<span class="number">57434055</span>);</span><br><span class="line">    a = <span class="title function_">md5_ii</span>(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>);</span><br><span class="line">    d = <span class="title function_">md5_ii</span>(d, a, b, c, x[i + <span class="number">3</span>], <span class="number">10</span>, -<span class="number">1894986606</span>);</span><br><span class="line">    c = <span class="title function_">md5_ii</span>(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">15</span>, -<span class="number">1051523</span>);</span><br><span class="line">    b = <span class="title function_">md5_ii</span>(b, c, d, a, x[i + <span class="number">1</span>], <span class="number">21</span>, -<span class="number">2054922799</span>);</span><br><span class="line">    a = <span class="title function_">md5_ii</span>(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>);</span><br><span class="line">    d = <span class="title function_">md5_ii</span>(d, a, b, c, x[i + <span class="number">15</span>], <span class="number">10</span>, -<span class="number">30611744</span>);</span><br><span class="line">    c = <span class="title function_">md5_ii</span>(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">15</span>, -<span class="number">1560198380</span>);</span><br><span class="line">    b = <span class="title function_">md5_ii</span>(b, c, d, a, x[i + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>);</span><br><span class="line">    a = <span class="title function_">md5_ii</span>(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">6</span>, -<span class="number">145523070</span>);</span><br><span class="line">    d = <span class="title function_">md5_ii</span>(d, a, b, c, x[i + <span class="number">11</span>], <span class="number">10</span>, -<span class="number">1120210379</span>);</span><br><span class="line">    c = <span class="title function_">md5_ii</span>(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>);</span><br><span class="line">    b = <span class="title function_">md5_ii</span>(b, c, d, a, x[i + <span class="number">9</span>], <span class="number">21</span>, -<span class="number">343485551</span>);</span><br><span class="line"> </span><br><span class="line">    a = <span class="title function_">safe_add</span>(a, olda);</span><br><span class="line">    b = <span class="title function_">safe_add</span>(b, oldb);</span><br><span class="line">    c = <span class="title function_">safe_add</span>(c, oldc);</span><br><span class="line">    d = <span class="title function_">safe_add</span>(d, oldd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>(a, b, c, d);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These functions implement the four basic operations the algorithm uses.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5_cmn</span>(<span class="params">q, a, b, x, s, t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">safe_add</span>(<span class="title function_">bit_rol</span>(<span class="title function_">safe_add</span>(<span class="title function_">safe_add</span>(a, q), <span class="title function_">safe_add</span>(x, t)), s), b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5_ff</span>(<span class="params">a, b, c, d, x, s, t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5_cmn</span>((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5_gg</span>(<span class="params">a, b, c, d, x, s, t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5_cmn</span>((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5_hh</span>(<span class="params">a, b, c, d, x, s, t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5_cmn</span>(b ^ c ^ d, a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5_ii</span>(<span class="params">a, b, c, d, x, s, t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5_cmn</span>(c ^ (b | (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment"> * to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safe_add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  <span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bit_rol</span>(<span class="params">num, cnt</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">hexMD5</span>: hex_md5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把这个md5.js放在utils目录下，使用方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utilMd5 = <span class="built_in">require</span>(<span class="string">&#x27;../../utils/md5.js&#x27;</span>);  </span><br><span class="line"><span class="keyword">var</span> sign = utilMd5.<span class="title function_">hexMD5</span>(signStr1); </span><br></pre></td></tr></table></figure>

<p>​	</p>
]]></content>
  </entry>
  <entry>
    <title>拦截器</title>
    <url>/hexo_blog/2024/09/23/%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="什么是拦截器"><a href="#什么是拦截器" class="headerlink" title="什么是拦截器"></a>什么是拦截器</h2><p>拦截器是一种在发送请求或接收响应之前或之后执行代码的机制。它们允许我们拦截和处理 HTTP 请求和响应，从而允许我们在请求或响应被处理之前进行额外的处理操作。</p>
<h2 id="拦截器能干什么"><a href="#拦截器能干什么" class="headerlink" title="拦截器能干什么"></a>拦截器能干什么</h2><p>拦截器可以用于多种目的，包括但不限于：</p>
<ul>
<li><strong>修改请求或响应的配置</strong>：例如添加请求头、处理响应数据等。</li>
<li><strong>认证和授权</strong>：例如在请求中添加认证信息、检查并处理 token 过期等。</li>
<li><strong>日志记录</strong>：记录请求和响应的信息，方便调试和监控。</li>
<li><strong>错误处理</strong>：统一处理请求或响应的错误，例如网络错误、超时等。</li>
<li><strong>拦截重定向</strong>：捕获重定向请求并进行处理，例如在特定条件下自动跳转到登录页面。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="title function_">async</span> (config) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 示例：添加请求头信息</span></span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">&#x27;Bearer your_token_here&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 示例：记录请求信息</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`发送请求：<span class="subst">$&#123;config.url&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 请求错误处理，例如网络错误等</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = res.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例：处理响应数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到响应：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data; <span class="comment">// 返回响应数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 示例：统一处理响应错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;响应错误:&#x27;</span>, error);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例：处理特定的错误状态码，例如 token 失效</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 重新获取token的逻辑，例如刷新token</span></span><br><span class="line">      <span class="comment">// 重新发送原请求</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">request</span>(error.<span class="property">config</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="title function_">async</span> (config) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 示例：添加请求头信息</span></span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">&#x27;Bearer your_token_here&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 示例：记录请求信息</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`发送请求：<span class="subst">$&#123;config.url&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 请求错误处理，例如网络错误等</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = res.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例：处理响应数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到响应：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data; <span class="comment">// 返回响应数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 示例：统一处理响应错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;响应错误:&#x27;</span>, error);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例：处理特定的错误状态码，例如 token 失效</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 重新获取token的逻辑，例如刷新token</span></span><br><span class="line">      <span class="comment">// 重新发送原请求</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">request</span>(error.<span class="property">config</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：模拟一个GET请求</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功获取数据:&#x27;</span>, response);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取数据失败:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行示例请求</span></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>算法笔记</title>
    <url>/hexo_blog/2024/09/23/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="算法学习"><a href="#算法学习" class="headerlink" title="算法学习"></a>算法学习</h1><h2 id="一、模板"><a href="#一、模板" class="headerlink" title="一、模板"></a>一、模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);<span class="comment">//取消同步流 不能使用scanf</span></span><br><span class="line">    <span class="type">int</span> t;cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、输入输出"><a href="#二、输入输出" class="headerlink" title="二、输入输出"></a>二、输入输出</h2><p>输出流</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; dec &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; oct &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">bitset</span>(<span class="number">5</span>)(a) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>格式化输入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cin 什么时候结束 空格和换行</span></span><br><span class="line"><span class="comment">//例： 输入： sohdasi sdiosd s sd sd s d</span></span><br><span class="line"><span class="built_in">getline</span>(cin,a);<span class="comment">//读入一行 </span></span><br><span class="line"><span class="comment">//例： 输入 10：10</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d:%d&quot;</span>);</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="comment">//例： 输入字符串12314129</span></span><br><span class="line"><span class="comment">//9为结束标志</span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; a &amp;&amp;  a!=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>换行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; endl;<span class="comment">//强制清除缓冲区</span></span><br></pre></td></tr></table></figure>

<h2 id="三、时间复杂度"><a href="#三、时间复杂度" class="headerlink" title="三、时间复杂度"></a>三、时间复杂度</h2><p>​	为了避免超时，我们一般将代码的运行次数控制在10^7 - 10^8</p>
<p>​	下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：</p>
<ol>
<li><p>n &lt; 30, 指数级别: DFS + 剪枝，状态压缩DP</p>
</li>
<li><p>n ≤ 100, 时间复杂度 O(n²): Floyd，DP，高斯消元</p>
</li>
<li><p>n ≤ 1000, 时间复杂度 O(n²)，O(n²logn): DP，二分，朴素版Dijkstra、朴素版Prim、Bellman-Ford</p>
</li>
<li><p>n ≤ 10000, 时间复杂度 O(n * √n): 块状链表、分块、莫队</p>
</li>
<li><p>n ≤ 100000, 时间复杂度 O(nlogn): 各种sort，线段树、树状数组、set&#x2F;map、heap、拓扑排序、Dijkstra + heap、Prim + heap、Kruskal、SPFA、求凸包、求半平面交、二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树</p>
</li>
<li><p>n ≤ 1000000, 时间复杂度 O(n), 以及常数较小的 O(nlogn)算法: 单调队列、hash、双指针扫描、BFS、并查集、KMP、AC自动机、常数比较小的 O(nlogn)的做法：sort、树状数组、heap、Dijkstra、SPFA</p>
</li>
<li><p>n ≤ 10000000, 时间复杂度 O(n): 双指针扫描、KMP、AC自动机、线性筛素数</p>
</li>
<li><p>n ≤ 10^9, 时间复杂度 O(√n): 判断质数</p>
</li>
<li><p>n ≤ 10^18, 时间复杂度 O(logn): 最大公约数，快速幂，数位DP</p>
</li>
<li><p>n ≤ 10^1000, 时间复杂度 O((logn)²): 高精度加减乘除</p>
</li>
<li><p>n ≤ 10^10000, 时间复杂度 O(logk × loglogk): k表示位数，高精度加减、FFT&#x2F;NTT</p>
</li>
</ol>
<p><strong>怎么计算自己代码的时间复杂度</strong></p>
<p><strong>线性阶O(n)</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">   j = i;</span><br><span class="line">   j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对数阶O(logN)</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面代码可以看到，在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。我们试着求解一下，假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x &#x3D; log2^n<br>也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(logn)</p>
<p><strong>线性对数阶O(nlogN)</strong><br>线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)。</p>
<p>就拿上面的代码加一点修改来举例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>; m&lt;n; m++)</span><br><span class="line">&#123;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>平方阶O(n2)</strong><br>平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²) 了。<br>举例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(x=<span class="number">1</span>; i&lt;=n; x++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       j = i;</span><br><span class="line">       j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码其实就是嵌套了2层n循环，它的时间复杂度就是 O(n*n)，即 O(n²)<br>如果将其中一层循环的n改成m，即：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(x=<span class="number">1</span>; i&lt;=m; x++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       j = i;</span><br><span class="line">       j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那它的时间复杂度就变成了 O(m*n)</p>
<p>立方阶O(n³)、K次方阶O(n^k)<br>参考上面的O(n²) 去理解就好了，O(n³)相当于三层n循环，其它的类似。</p>
<p>除此之外，其实还有 平均时间复杂度、均摊时间复杂度、最坏时间复杂度、最好时间复杂度 的分析方法，有点复杂，这里就不展开了。</p>
<h2 id="四、前缀和与差分"><a href="#四、前缀和与差分" class="headerlink" title="四、前缀和与差分"></a>四、前缀和与差分</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一维</span></span><br><span class="line">a[N]  prefix[N]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    prefix[i] = prefix[i<span class="number">-1</span>] + a[i]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//l-r 区间求和</span></span><br><span class="line">    prefix[r] - prefix[l<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment">//二维</span></span><br><span class="line">a[N][N] prefix[N][N]</span><br><span class="line">    </span><br><span class="line">    prefix[i][j] = prefix[i][j<span class="number">-1</span>] + prefix[i<span class="number">-1</span>][j] -p[i<span class="number">-1</span>][j<span class="number">-1</span>] + a[i][j]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//x1 y1-x2 y2</span></span><br><span class="line">    anx = prefix[x2][y2] - prefix[x1][y2<span class="number">-1</span>] - prefix[x2][y1<span class="number">-1</span>] + prefix[x1<span class="number">-1</span>][y1<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一维</span></span><br><span class="line">a[N] diff[N]</span><br><span class="line">    </span><br><span class="line">    diff[i] = a[i] - a[i<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//l-r 区间修改</span></span><br><span class="line">    diff[l]+=x;</span><br><span class="line">	diff[r<span class="number">+1</span>]-=x;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//求a[i]</span></span><br><span class="line">	a[i] = diff[i] + a[i<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line"><span class="comment">//二维</span></span><br><span class="line">a[N][N] diff[N][N]</span><br><span class="line">     </span><br><span class="line">    d[i][j] += a[i][j]</span><br><span class="line">	d[i + <span class="number">1</span>][j] -= a[i][j]</span><br><span class="line">	d[i][j + <span class="number">1</span>] -= a[i][j]</span><br><span class="line">	d[i + <span class="number">1</span>][j + <span class="number">1</span>] += a[i][j]</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//x1 y1 - x2 y2 区间修改</span></span><br><span class="line">	diff[x1][y1] +=x</span><br><span class="line">	diff[x2<span class="number">+1</span>][y2<span class="number">+1</span>] -=x</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//求a[i][j]</span></span><br><span class="line">    a[i][j] = a[i - <span class="number">1</span>][j] + a[i][j - <span class="number">1</span>] - a[i - <span class="number">1</span>][j - <span class="number">1</span>] + d[i][j];</span><br></pre></td></tr></table></figure>
<p>例题<br><a href="https://www.luogu.com.cn/problem/P8218">P8218 【深进1.例1】求区间和 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<p><a href="https://www.luogu.com.cn/problem/P1719">P1719 最大加权矩形 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<p><a href="https://www.luogu.com.cn/problem/P1115">P1115 最大子段和 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<p><a href="https://www.luogu.com.cn/problem/P2367">P2367 语文成绩 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<p><a href="https://www.luogu.com.cn/problem/P3397">P3397 地毯 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<p><a href="https://www.luogu.com.cn/problem/P2004">P2004 领地选择 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
]]></content>
  </entry>
</search>
